package com.multiplayer_grupp1.multiplayer_grupp1.controller;

import com.multiplayer_grupp1.multiplayer_grupp1.Dto.LobbyDTO;

import org.springframework.http.ResponseEntity;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.*;

import com.multiplayer_grupp1.multiplayer_grupp1.service.LobbyService;
import lombok.RequiredArgsConstructor;

// 츿ndringar:
// - Lade till SimpMessagingTemplate f칬r att kunna skicka WebSocket-meddelanden.
// - N칛r en lobby skapas eller en spelare ansluter s친 broadcastas uppdaterad lobbyinfo till alla i lobbyn.
// - Lade till @CrossOrigin("*") f칬r att frontend (p친 annan dom칛n) ska kunna anropa API:t.
// - Lade till endpoint f칬r att l칛mna en lobby.

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/lobby")
@CrossOrigin("*")
public class LobbyController {

    private final LobbyService lobbyService;
    private final SimpMessagingTemplate messagingTemplate;

    // Mapping f칬r att skapa lobby, d친 autogenreras en LobbyCode som andra anv칛ndare sedan kan joina din lobby med
    @PostMapping("/create/{playerId}")
    public LobbyDTO createLobby(@PathVariable Long playerId) {
        LobbyDTO dto = lobbyService.createLobby(playerId);
        messagingTemplate.convertAndSend("/lobby/" + dto.lobbyCode(), dto);
        return dto;
    }

    // Mapping f칬r att joina n친gons lobby om du har den giltiga lobbycoden och lobbyn ej 칛r full 
    @PostMapping("/join/{lobbyCode}/{playerId}")
    public LobbyDTO joinLobby(@PathVariable String lobbyCode, @PathVariable Long playerId) {
        LobbyDTO dto = lobbyService.addPlayerToLobby(lobbyCode, playerId);
        // 游댒 tala om f칬r alla i lobbyn att players-listan 칛ndrats
        messagingTemplate.convertAndSend("/lobby/" + lobbyCode, dto);
        return dto;
    }

    // Mapping f칬r att l칛mna en lobby
    @PostMapping("/leave/{lobbyCode}/{playerId}")
        public LobbyDTO leaveLobby(@PathVariable String lobbyCode, @PathVariable Long playerId) {
        LobbyDTO dto = lobbyService.removePlayerFromLobby(lobbyCode, playerId);
        // 游댒 tala om f칬r alla i lobbyn att players-listan 칛ndrats
        messagingTemplate.convertAndSend("/lobby/" + lobbyCode, dto);
        return dto;
    }

    // Mapping f칬r att nollst칛lla anv칛ndares readysetting s친 att de d친 p친 nytt kan indikera att de 칛r redo f칬r att starta ett spel
    @PostMapping("/{lobbyCode}/ready/reset")
    public ResponseEntity<Void> resetReady(@PathVariable String lobbyCode) {
        lobbyService.resetReadyAndBroadcast(lobbyCode);
        return ResponseEntity.ok().build();
    }
}
